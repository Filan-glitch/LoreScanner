import 'dart:convert';
import 'package:dart_mappable/dart_mappable.dart';

// Will be generated by dart_mappable
part 'card.mapper.dart';

@MappableClass()
class Card with CardMappable {
  // Relevant fields
  final int id;
  final String setCode;
  final int number;
  final String simpleName;
  final String language;
  final String fullName;
  final String rarity;
  final String story;
  final String type;
  final int cost;
  final String? promoGrouping;

  @MappableField(hook: ColorsHook(), key: 'color')
  final List<String> colors;

  @MappableField(hook: FoilHook())
  final List<String> foilTypes;

  @MappableField(hook: InkwellHook())
  final bool inkwell;

  @MappableField(hook: ImagesHook())
  final Map<String, String> images;

  @MappableField(hook: ExternalLinksHook())
  final Map<String, String> externalLinks;

  // Optional fields
  /*
  final List<Ability>? abilities;
  final List<String>? artists;
  final String? artistsText;
  final String? bannedSince;
  final List<String>? clarifications;
  final String? code;
  final String? color;
  final List<String>? colors;
  final int? cost;
  final List<String>? effects;
  final String? enchantedId;
  final String? errata;
  final Map<String, String>? externalLinks;
  final String? flavorText;
  final List<String>? foilTypes;
  final String? fullIdentifier;
  final String? fullName;
  final String? fullText;
  final List<String>? fullTextSections;
  final bool? inkwell;
  final bool? isExternalReveal;
  final List<String>? keywordAbilities;
  final int? lore;
  final int? maxCopiesInDeck;
  final int? moveCost;
  final String? name;
  final int? nonEnchantedId;
  final int? nonPromoId;
  final int? number;
  final String? promoGrouping;
  final List<int>? promoIds;
  final String? rarity;
  final String? story;
  final int? strength;
  final List<String>? subtypes;
  final String? subtypesText;
  final String? type;
  final String? variant;
  final List<int>? variantIds;
  final String? varnishType;
  final String? version;
  final int? willpower;
  */
  // Constructor
  Card({
    required this.id,
    required this.setCode,
    required this.images,
    required this.number,
    required this.simpleName,
    required this.fullName,
    required this.rarity,
    required this.story,
    required this.type,
    required this.inkwell,
    required this.cost,
    required this.externalLinks,
    this.promoGrouping,
    this.foilTypes = const [],
    this.colors = const [],
    this.language = 'de'
  });

}

class Ability {
  final String? fullText;
  final String? type;
  final String? keyword;
  final String keywordValue;
  final int? keywordValueNumber;
  final String? reminderText;
  final String? effect;
  final String? name;
  final List<String>? costs;
  final String? costsText;

  Ability({
    this.fullText,
    this.type,
    this.keyword,
    required this.keywordValue,
    this.keywordValueNumber,
    this.reminderText,
    this.effect,
    this.name,
    this.costs,
    this.costsText
  });
}

class ColorsHook extends MappingHook {
  const ColorsHook();

  @override
  Object? beforeEncode(Object? value) {
    if (value is List<String>) {
      // Convert the list to a JSON string
      return value.join('-');
    }
    return value;
  }

  @override
  Object? beforeDecode(Object? value) {
    if (value is String) {
      // Convert the JSON string back to a list
      return value.split('-').map((e) => e.trim()).toList();
    }
    return value;
  }
}

class FoilHook extends MappingHook {
  const FoilHook();

  @override
  Object? beforeEncode(Object? value) {
    if (value is List<String>) {
      // Convert the map to a JSON string
      return jsonEncode(value);
    }
    return value;
  }

  @override
  Object? beforeDecode(Object? value) {
    if (value is String) {
      // Convert the JSON string back to a map
      return jsonDecode(value) as List<dynamic>;
    }
    return value;
  }
}

class InkwellHook extends MappingHook {
  const InkwellHook();

  @override
  Object? beforeEncode(Object? value) {
    if (value is bool) {
      return value ? 1 : 0;
    }
    return value;
  }

  @override
  Object? beforeDecode(Object? value) {
    if (value is int) {
      return value == 1;
    }
    return value;
  }
}

class ImagesHook extends MappingHook {
  const ImagesHook();

  @override
  Object? beforeEncode(Object? value) {
    if (value is Map<String, String>) {
      // Convert the map to a JSON string
      return jsonEncode(value);
    }
    return value;
  }

  @override
  Object? beforeDecode(Object? value) {
    if (value is String) {
      // Convert the JSON string back to a map
      return jsonDecode(value) as Map<String, dynamic>;
    }
    return value;
  }
}

class ExternalLinksHook extends MappingHook {
  const ExternalLinksHook();

  @override
  Object? beforeEncode(Object? value) {
    if (value is Map<String, String>) {
      // Convert the map to a JSON string
      return jsonEncode(value);
    }
    return value;
  }

  @override
  Object? beforeDecode(Object? value) {
    if (value is String) {
      // Convert the JSON string back to a map
      return jsonDecode(value) as Map<String, dynamic>;
    }
    return value;
  }
}